{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 4,
    "pending": 0,
    "failures": 1,
    "start": "2022-04-29T11:59:37.131Z",
    "end": "2022-04-29T12:00:12.878Z",
    "duration": 35747,
    "testsRegistered": 5,
    "passPercent": 80,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "babc43ec-8d39-4908-8d49-87dedc004a7a",
      "title": "",
      "fullFile": "cypress/integration/firstTest.spec.js",
      "file": "cypress/integration/firstTest.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6ec771a5-469d-43ea-b7cc-f4d3a210c224",
          "title": "Test with backend",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify correct request and response",
              "fullTitle": "Test with backend Verify correct request and response",
              "timedOut": null,
              "duration": 9755,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// cy.log(\"LOGGED IN\");\n// To intercept the calls, we need to create a Cypress server\n// cy.server();\ncy.intercept(\"POST\", \"**/api.realworld.io/api/articles\").as(\"postArticles\"); // cy.intercept(\"POST\", \"**/articles\").as(\"postArticles\");\ncy.contains(\"New Article\").click();\nconst articleTitle = \"This is the title of this article\";\nconst articleDescription = \"This is the description\";\nconst articleText = \"Article text\"; // Fill in the inputs\ncy.get(\"input[placeholder='Article Title']\").type(articleTitle);\ncy.get('input[placeholder=\"What\\'s this article about?\"]').type(articleDescription);\ncy.get('textarea[placeholder=\"Write your article (in markdown)\"]').type(articleText);\ncy.contains(\"button\", \"Publish Article\").click(); // wait for the request to complete and handle the returned value\ncy.wait(\"@postArticles\");\ncy.get(\"@postArticles\").then(xhr => {\n  console.log(xhr); // assert that the request title is the one we typed\n  // and that the response description is the one we typed\n  expect(xhr.response.statusCode).to.equal(200);\n  expect(xhr.request.body.article.title).to.equal(articleTitle);\n  expect(xhr.response.body.article.title).to.equal(articleTitle);\n});\ndeleteArticleByTitle(articleTitle);",
              "err": {},
              "uuid": "92210c29-d260-4204-86fc-c3e38e104491",
              "parentUUID": "6ec771a5-469d-43ea-b7cc-f4d3a210c224",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Intercept and modify request and response",
              "fullTitle": "Test with backend Intercept and modify request and response",
              "timedOut": null,
              "duration": 8689,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Modify Request\n// cy.intercept(\"POST\", \"**/api.realworld.io/api/articles\", (req) => {\n//   req.body.article.description = \"This is a description 2\";\n// }).as(\"postArticles\");\n// Modify Response\ncy.intercept(\"POST\", \"**/api.realworld.io/api/articles\", req => {\n  req.reply(res => {\n    expect(res.body.article.description).to.equal(\"This is the description\");\n    res.body.article.description = \"This is the description 2\";\n  });\n}).as(\"postArticles\");\ncy.contains(\"New Article\").click();\nconst articleTitle = \"This is the title of this article\";\nconst articleDescription = \"This is the description\";\nconst articleText = \"Article text\"; // Fill in the inputs\ncy.get(\"input[placeholder='Article Title']\").type(articleTitle);\ncy.get('input[placeholder=\"What\\'s this article about?\"]').type(articleDescription);\ncy.get('textarea[placeholder=\"Write your article (in markdown)\"]').type(articleText);\ncy.contains(\"button\", \"Publish Article\").click(); // wait for the request to complete and handle the returned value\ncy.wait(\"@postArticles\");\ncy.get(\"@postArticles\").then(xhr => {\n  console.log(xhr); // assert that the request title is the one we typed\n  // and that the response description is the one we typed\n  expect(xhr.response.statusCode).to.equal(200);\n  expect(xhr.request.body.article.title).to.equal(articleTitle);\n  expect(xhr.response.body.article.title).to.equal(articleTitle);\n});\ndeleteArticleByTitle(articleTitle);",
              "err": {},
              "uuid": "537677b3-7055-4731-9ab5-aa50455ec23d",
              "parentUUID": "6ec771a5-469d-43ea-b7cc-f4d3a210c224",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Intercept get request with custom response",
              "fullTitle": "Test with backend Intercept get request with custom response",
              "timedOut": null,
              "duration": 2140,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// cy.wait(\"@getTags\");\ncy.get(\".tag-list\").should(\"contain\", \"cypress\").and(\"contain\", \"automation\").and(\"contain\", \"testing\");",
              "err": {},
              "uuid": "0f01befc-4c05-49c1-bb92-9ce3b839bca7",
              "parentUUID": "6ec771a5-469d-43ea-b7cc-f4d3a210c224",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify global feed likes count",
              "fullTitle": "Test with backend Verify global feed likes count",
              "timedOut": null,
              "duration": 6949,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.intercept(\"GET\", \"**/articles/feed\", {\n  articles: [],\n  articlesCount: 0\n});\ncy.intercept(\"GET\", \"**/articles*\", {\n  fixture: \"articles.json\"\n});\ncy.wait(2000);\ncy.contains(\"Global Feed\").click();\ncy.get(\"app-article-list button\").then(likeButtons => {\n  expect(likeButtons[0]).to.contain(15);\n  expect(likeButtons[1]).to.contain(2);\n});\ncy.fixture(\"articles\").then(file => {\n  const articleLink = file.articles[1].slug;\n  cy.intercept(\"POST\", `**/articles/${articleLink}/favourite`, file.articles[1]);\n});\ncy.get(\"app-article-list button\").eq(1).click().should(\"contain\", 3);",
              "err": {},
              "uuid": "5f509c6e-b7bc-4efc-93d2-871d403032d8",
              "parentUUID": "6ec771a5-469d-43ea-b7cc-f4d3a210c224",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test article deletion",
              "fullTitle": "Test with backend Test article deletion",
              "timedOut": null,
              "duration": 3113,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// To test deletion, we need to create a test article.\n// We do so using api calls, not to bother with UI\n// Intercept any DELETE\ncy.intercept({\n  method: \"DELETE\"\n}).as(\"deleteRequest\");\nconst articleBody = {\n  article: {\n    tagList: [],\n    title: \"Request from API\",\n    description: \"This article is about requests from api.\",\n    body: \"Requests from api are invisible to the user.\"\n  }\n};\ncy.get(\"@token\").then(token => {\n  // POST request to create article\n  cy.request({\n    method: \"POST\",\n    url: `${Cypress.env(\"apiURL\")}api/articles/`,\n    headers: {\n      Authorization: `Token ${token}`\n    },\n    body: articleBody\n  }).then(response => {\n    expect(response.status).to.equal(200);\n  }); // // Delete article using the UI\n  // // cy.contains(\"Global Feed\").click();\n  // cy.get(\"a.nav-link\").contains(\"Global Feed\").click();\n  // // cy.wait(5000);\n  // // cy.contains(articleBody.article.title).click();\n  // cy.get(\".article-preview\").contains(articleBody.article.title).click();\n  // // cy.contains(\"Delete Article\").click();\n  // cy.get(\"button.btn-outline-danger\").contains(\"Delete Article\").click();\n  deleteArticleByTitle(articleBody.article.title); // CHECK IF THE ARTICLE WAS DELETED\n  cy.wait(\"@deleteRequest\").then(() => {\n    cy.request({\n      method: \"GET\",\n      url: `${Cypress.env(\"apiURL\")}/api/articles?limit=10&offset=0`,\n      headers: {\n        Authorization: `Token ${token}`\n      }\n    }).its(\"body\").then(body => {\n      body.articles.forEach(element => {\n        expect(element.title).not.to.include(articleBody.article.title);\n      });\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttps://conduit.productionready.io/api/articles/\n\nThe response we received from your web server was:\n\n  > 422: Unprocessable Entity\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://conduit.productionready.io/api/articles/\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"Authorization\": \"Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imtvc3Rhc3NpYXNpb3MxOTk5QGdtYWlsLmNvbSIsInVzZXJuYW1lIjoia1NpYXNpb3MiLCJpYXQiOjE2NTEyMzM2MTAsImV4cCI6MTY1NjQxNzYxMH0.WMJxRuRcXmMBo5iqVr087EXWLME2el2EGTj-olrj9tc\",\n  \"user-agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/101.0.4951.41 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 164,\n  \"referer\": \"https://conduit.productionready.io/api/articles/\"\n}\nBody: {\"article\":{\"tagList\":[],\"title\":\"Request from API\",\"description\":\"This article is about requests from api.\",\"body\":\"Requests from api are invisible to the user.\"}}\nRedirects: [\n  \"307: https://api.realworld.io/api/articles/\"\n]\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 422 - Unprocessable Entity\nHeaders: {\n  \"date\": \"Fri, 29 Apr 2022 12:00:11 GMT\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"content-length\": \"39\",\n  \"connection\": \"keep-alive\",\n  \"x-powered-by\": \"Express\",\n  \"access-control-allow-origin\": \"*\",\n  \"etag\": \"W/\\\"27-BNeuaWQ7DHvW/r+pl+qdJiF06Is\\\"\",\n  \"via\": \"1.1 vegur\",\n  \"cf-cache-status\": \"DYNAMIC\",\n  \"expect-ct\": \"max-age=604800, report-uri=\\\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\\\"\",\n  \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=WgN4uuE025JGvlNWD%2FljnlO17eBXa5wJr9VTCHposgi6H%2FWMiJOP7KA5UvaONgSviwUwEx6KIFCl8VzAx36esLt5ETX6QOgrVrdrMxNjpFx3fkVf5hd4hR%2BW%2BuCpMgX1aVvEwROPvQtXjB%2B2smug\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n  \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n  \"server\": \"cloudflare\",\n  \"cf-ray\": \"7037e0390b3c91db-FRA\",\n  \"alt-svc\": \"h3=\\\":443\\\"; ma=86400, h3-29=\\\":443\\\"; ma=86400\"\n}\nBody: {\n  \"errors\": {\n    \"title\": [\n      \"must be unique\"\n    ]\n  }\n}\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttps://conduit.productionready.io/api/articles/\n\nThe response we received from your web server was:\n\n  > 422: Unprocessable Entity\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://conduit.productionready.io/api/articles/\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"Authorization\": \"Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imtvc3Rhc3NpYXNpb3MxOTk5QGdtYWlsLmNvbSIsInVzZXJuYW1lIjoia1NpYXNpb3MiLCJpYXQiOjE2NTEyMzM2MTAsImV4cCI6MTY1NjQxNzYxMH0.WMJxRuRcXmMBo5iqVr087EXWLME2el2EGTj-olrj9tc\",\n  \"user-agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/101.0.4951.41 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 164,\n  \"referer\": \"https://conduit.productionready.io/api/articles/\"\n}\nBody: {\"article\":{\"tagList\":[],\"title\":\"Request from API\",\"description\":\"This article is about requests from api.\",\"body\":\"Requests from api are invisible to the user.\"}}\nRedirects: [\n  \"307: https://api.realworld.io/api/articles/\"\n]\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 422 - Unprocessable Entity\nHeaders: {\n  \"date\": \"Fri, 29 Apr 2022 12:00:11 GMT\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"content-length\": \"39\",\n  \"connection\": \"keep-alive\",\n  \"x-powered-by\": \"Express\",\n  \"access-control-allow-origin\": \"*\",\n  \"etag\": \"W/\\\"27-BNeuaWQ7DHvW/r+pl+qdJiF06Is\\\"\",\n  \"via\": \"1.1 vegur\",\n  \"cf-cache-status\": \"DYNAMIC\",\n  \"expect-ct\": \"max-age=604800, report-uri=\\\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\\\"\",\n  \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=WgN4uuE025JGvlNWD%2FljnlO17eBXa5wJr9VTCHposgi6H%2FWMiJOP7KA5UvaONgSviwUwEx6KIFCl8VzAx36esLt5ETX6QOgrVrdrMxNjpFx3fkVf5hd4hR%2BW%2BuCpMgX1aVvEwROPvQtXjB%2B2smug\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n  \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n  \"server\": \"cloudflare\",\n  \"cf-ray\": \"7037e0390b3c91db-FRA\",\n  \"alt-svc\": \"h3=\\\":443\\\"; ma=86400, h3-29=\\\":443\\\"; ma=86400\"\n}\nBody: {\n  \"errors\": {\n    \"title\": [\n      \"must be unique\"\n    ]\n  }\n}\n\n\nhttps://on.cypress.io/request\n    at http://localhost:4200/__cypress/runner/cypress_runner.js:164670:80\n    at tryCatcher (http://localhost:4200/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:4200/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:4200/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:4200/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:4200/__cypress/runner/cypress_runner.js:11139:18)\n    at _drainQueueStep (http://localhost:4200/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:4200/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:4200/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:4200/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:4200/__cypress/tests?p=cypress/integration/firstTest.spec.js:232:12)",
                "diff": null
              },
              "uuid": "379b7aec-4e12-44ec-ae5b-c0c3486b4b6f",
              "parentUUID": "6ec771a5-469d-43ea-b7cc-f4d3a210c224",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "92210c29-d260-4204-86fc-c3e38e104491",
            "537677b3-7055-4731-9ab5-aa50455ec23d",
            "0f01befc-4c05-49c1-bb92-9ce3b839bca7",
            "5f509c6e-b7bc-4efc-93d2-871d403032d8"
          ],
          "failures": [
            "379b7aec-4e12-44ec-ae5b-c0c3486b4b6f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 30646,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}